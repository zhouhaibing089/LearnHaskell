You can change the prompt by typing
	:set prompt <prompt>
For example:
	:set prompt ghci

Basic calculator usage:
ghci > 2 + 15
17
ghci > 49 * 100
4900
ghci > 1892 - 1472
420
ghci > 5 / 2
2.5

You can use parentheses
ghci > (50 * 100) - 4999
1
ghci > 50 * 100 - 4999
1
ghci > 50 * (100 - 4999)
-244950

When you deal with negative number, you need parentheses
> ghci > 5 * (-3)
-15

Boolean value
ghci > True && False
False
ghci > True || False
True
ghci > not True
False

Testing equality
ghci > 5 == 5
True
ghci > 1 == 0
False
ghci > 5 /= 5			// /= means not equal
False
ghci > 5 /= 4
True
ghci > "Hello" == "Hello"
True

When type dismatch, interpreter will yell error
You can not give command like that:
5 + "llama" or 5 == True

Here are some functions:
succ 
min
max

to use an infix function, for example:
5 `div` 2			// you will get the value 1, compare to 5 / 2


Here you can define your own functions

doubleMe x = x + x

save it to some file, for example babyfun.hs
then you can load that function
:l babyfun

Haskell expressions
doubleSmallNumber x = if x > 100
					then x
					else x * 2

Notice: the else part is mandatory in Haskell

In haskell, every expression and function must return something.

An expression is basically a piece of code that returns a value

In haskell, lists are a homogenous data structure. It stores several elements of the same type. That means that we can have a list of integers or a list of characters but we can not have a list that has a few integers and then a few characters.

use let keyword to define a name right in GHCI.
Doing let a = 1 inside ghci is the equivalent of writing a = 1 in a script and then loading it.

let lostNumbers = [4, 8, 15, 16, 23, 48]

lists are denoted by square brackets and the value in the lists are seperated by commas.

Put two lists together, this is done by using the ++ operator
[1, 2, 3, 4] ++ [9, 10, 11, 12] will get
[1, 2, 3, 4, 9, 10, 11, 12]

"hello, " ++ "world" will get "Hello, world"

Putting something at the beginning of a list using the : operator
'A' : " SMALL CAT" you will get 
"A SMALL CAT"

[1, 2, 3] is actually syntactic sugar for 1:2:3:[]. [] is an empty list.

[], [[]], [[], [], []] are all different things, the first one is am empty list, the second one is a list that contains one empty list, the third one is a list that contains three empty lists.

!! get an element out of a list, the indices start at 0
ghci > "Steve Buscemi" !! 6 
'B'
ghci > [9.4, 33.2, 96.2, 11.2, 23.25] !! 1
33.2
You can not get element which is out of range

List can be compared if the stuff they contain can be compared. when  using <, <=, >, >= to compare lists, they are compared in lexicographical order.

Here are some basic functions that operate on lists

head: return its head
ghci > head [5, 4, 3, 2, 1]
5

tail: return its tail
ghci > tail [5, 4, 3, 2, 1]
[4, 3, 2, 1]

last: return its last element
ghci > last [5, 4, 3, 2, 1]
1

init: returns everything except last element
ghci > init [5, 4, 3, 2, 1]
[5, 4, 3, 2]

the functions above can not take an empty list

length: return its length
ghci > length [5, 4, 3, 2, 1]
5

null: check if a list is empty
ghci > null [1, 2, 3]
False
ghci > null []
True

reverse: reverses a list
ghci > reverse [5, 4, 3, 2, 1]
[1, 2, 3, 4, 5]

take: takes number and a list, it extracts that many elements from beginning of the list.
ghci > take 3 [5, 4, 3, 2, 1]
[5, 4, 3]
ghci > take 1 [3, 9, 3]
[3]
ghci > take 5 [1, 2]	// if the number is more than length, return the list itself
[1, 2]
ghci > take 0 [6, 6, 6]
[]


drop: works in a similar way, only it drops the number of elements from the beginning of a list
ghci > drop 3 [8, 4, 2, 1, 5, 6]
[1, 5, 6]
ghci > drop 0 [1, 2, 3, 4]
[1, 2, 3, 4]
ghci > drop 100 [1, 2, 3, 4]
[]

maximum: return the biggest element
minimum: return the smallest element

sum: return the sum of all element
product: return the product of all element
ghci > sum [5, 2, 1, 6, 3, 2, 5, 7]
31
ghci > product [6, 2, 1, 2]
24

ele: takes a thing and a list of things and tells us if that thing is an element of that list. usually use an infix way

Texas ranges


